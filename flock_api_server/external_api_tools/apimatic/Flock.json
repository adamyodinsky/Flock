{
  "openapi": "3.0.0",
  "info": {
    "title": "Flock",
    "description": "Flock Orchestrator",
    "contact": {
      "name": "Adam yodinsky",
      "email": "adam.yodinsky@gmail.com"
    },
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Flock",
      "variables": {}
    }
  ],
  "paths": {
    "/resource/{namespace}/{kind}/{name}": {
      "get": {
        "tags": ["flock"],
        "summary": "get-resource",
        "description": "Get a resource",
        "operationId": "get-resource",
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace of resource",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "kind",
            "in": "path",
            "description": "Kind of resource",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of a resource",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resource Fetched",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceFetched"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound1"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError1"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "summary": "post-resource",
        "description": "Create a resource",
        "operationId": "post-resource",
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace of resource",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "kind",
            "in": "path",
            "description": "Kind of resource",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of a resource",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceData"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Resource Created",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceCreated"
                }
              }
            }
          },
          "202": {
            "description": "Resource Accepted",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceAccepted"
                }
              }
            }
          },
          "400": {
            "description": "Resource Bad Request",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceBadRequest1"
                }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceAlreadyExists1"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError1"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "summary": "put-resource",
        "description": "Create or update a resource",
        "operationId": "put-resource",
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace of resource",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "kind",
            "in": "path",
            "description": "Kind of resource",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of a resource",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResourceData"
              }
            }
          },
          "required": false
        },
        "responses": {
          "201": {
            "description": "Resource Created",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceCreated"
                }
              }
            }
          },
          "202": {
            "description": "Resource Accepted",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceAccepted"
                }
              }
            }
          },
          "204": {
            "description": "Resource Updated",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceUpdated"
                }
              }
            }
          },
          "400": {
            "description": "Resource Bad Request",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceBadRequest1"
                }
              }
            }
          },
          "409": {
            "description": "Resource Already Exists",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceAlreadyExists1"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError1"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "delete-resource-namespace-kind-name",
        "description": "Delete a resource and returns it",
        "operationId": "delete-resource-namespace-kind-name",
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "Namespace of resource",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "kind",
            "in": "path",
            "description": "Kind of resource",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name of a resource",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Resource Deleted",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceDeleted"
                }
              }
            }
          },
          "400": {
            "description": "Resource Bad Request",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceBadRequest1"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound1"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/resource/{namespace}/{kind}": {
      "get": {
        "tags": ["flock"],
        "summary": "get-resource-namespace-kind",
        "description": "Get Resources list by namespace and kind",
        "operationId": "get-resource-namespace-kind",
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "kind",
            "in": "path",
            "description": "kind",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resources Fetched",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcesFetched"
                }
              }
            }
          },
          "400": {
            "description": "Resource Bad Request",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceBadRequest1"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound1"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError1"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "summary": "delete-resource-namespace-kind",
        "description": "Deletes all resources by namespace and kind, returns a list of the deleted resources.",
        "operationId": "delete-resource-namespace-kind",
        "parameters": [
          {
            "name": "namespace",
            "in": "path",
            "description": "namespace",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "kind",
            "in": "path",
            "description": "kind",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Resources Fetched",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourcesFetched"
                }
              }
            }
          },
          "400": {
            "description": "Resource Bad Request",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceBadRequest1"
                }
              }
            }
          },
          "404": {
            "description": "Resource Not Found",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResourceNotFound1"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError1"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "components": {
    "schemas": {
      "ResourceDetails": {
        "title": "ResourceDetails",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          }
        }
      },
      "AgentSchema": {
        "title": "AgentSchema",
        "required": ["namespace", "apiVersion", "kind", "metadata", "spec"],
        "type": "object",
        "properties": {
          "namespace": {
            "maxLength": 63,
            "type": "string",
            "description": "The namespace of the object"
          },
          "apiVersion": {
            "enum": ["flock/v1"],
            "type": "string",
            "description": "API version"
          },
          "kind": {
            "enum": ["Agent"],
            "type": "string",
            "description": "The kind of the object"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseMetaData"
              },
              {
                "description": "Base metadata schema."
              }
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Creation timestamp",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Last update timestamp",
            "format": "date-time"
          },
          "spec": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentSpec"
              },
              {
                "description": "Agent spec."
              }
            ]
          }
        },
        "description": "Agent schema."
      },
      "AgentSpec": {
        "title": "AgentSpec",
        "required": ["vendor", "tools", "dependencies"],
        "type": "object",
        "properties": {
          "options": {
            "type": "object",
            "description": "Resource options"
          },
          "vendor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentType"
              },
              {
                "description": "Agent type"
              }
            ]
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseToolDependency"
            },
            "description": "Agent tools"
          },
          "dependencies": {
            "maxItems": 1,
            "minItems": 1,
            "type": "array",
            "items": {},
            "description": "Agent dependencies"
          }
        },
        "description": "Agent spec."
      },
      "AgentType": {
        "title": "AgentType",
        "enum": [
          "zero-shot-react-description",
          "react-docstore",
          "self-ask-with-search",
          "conversational-react-description",
          "chat-zero-shot-react-description",
          "chat-conversational-react-description"
        ],
        "type": "string",
        "description": "Enum for Agent types."
      },
      "BaseDependency": {
        "title": "BaseDependency",
        "required": ["name", "kind"],
        "type": "object",
        "properties": {
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Labels are useful for filtering and finding objects"
          },
          "name": {
            "type": "string",
            "description": "Name of the dependency"
          },
          "kind": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Kind"
              },
              {
                "description": "Kind of the dependency"
              }
            ]
          },
          "namespace": {
            "maxLength": 63,
            "type": "string",
            "description": "The namespace of the object",
            "default": "default"
          }
        },
        "description": "Base dependency schema."
      },
      "BaseMetaData": {
        "title": "BaseMetaData",
        "required": ["name", "description"],
        "type": "object",
        "properties": {
          "annotations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Annotations are useful for storing additional information"
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Labels are useful for filtering and finding objects"
          },
          "name": {
            "maxLength": 63,
            "type": "string",
            "description": "Name of the object"
          },
          "description": {
            "maxLength": 255,
            "type": "string",
            "description": "Description"
          }
        },
        "description": "Base metadata schema."
      },
      "BaseSpec": {
        "title": "BaseSpec",
        "required": ["vendor"],
        "type": "object",
        "properties": {
          "options": {
            "type": "object",
            "description": "Resource options"
          },
          "vendor": {
            "type": "string",
            "description": "The resource class"
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseDependency"
            },
            "description": "Dependencies for the object"
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseToolDependency"
            },
            "description": "Tools for the object"
          }
        },
        "description": "Base spec schema."
      },
      "BaseToolDependency": {
        "title": "BaseToolDependency",
        "required": ["name", "kind"],
        "type": "object",
        "properties": {
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Labels are useful for filtering and finding objects"
          },
          "name": {
            "type": "string",
            "description": "Name of the dependency"
          },
          "kind": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Kind"
              },
              {
                "description": "Kind of the dependency"
              }
            ]
          },
          "namespace": {
            "maxLength": 63,
            "type": "string",
            "description": "The namespace of the object",
            "default": "default"
          },
          "description": {
            "type": "string",
            "description": "Tool description"
          }
        },
        "description": "Base tool dependency schema."
      },
      "Code": {
        "title": "Code",
        "enum": [200],
        "type": "integer"
      },
      "Code1": {
        "title": "Code1",
        "enum": [404],
        "type": "integer"
      },
      "Code2": {
        "title": "Code2",
        "enum": [500],
        "type": "integer"
      },
      "Code3": {
        "title": "Code3",
        "enum": [201],
        "type": "integer"
      },
      "Code4": {
        "title": "Code4",
        "enum": [202],
        "type": "integer"
      },
      "Code5": {
        "title": "Code5",
        "enum": [400],
        "type": "integer"
      },
      "Code6": {
        "title": "Code6",
        "enum": [409],
        "type": "integer"
      },
      "Code7": {
        "title": "Code7",
        "enum": [204],
        "type": "integer"
      },
      "CustomSchema": {
        "title": "CustomSchema",
        "required": ["namespace", "apiVersion", "kind", "metadata", "spec"],
        "type": "object",
        "properties": {
          "namespace": {
            "maxLength": 63,
            "type": "string",
            "description": "The namespace of the object"
          },
          "apiVersion": {
            "enum": ["flock/v1"],
            "type": "string",
            "description": "API version"
          },
          "kind": {
            "type": "string",
            "description": "The kind of the custom object"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseMetaData"
              },
              {
                "description": "Base metadata schema."
              }
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Creation timestamp",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Last update timestamp",
            "format": "date-time"
          },
          "spec": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseSpec"
              },
              {
                "description": "Base spec schema."
              }
            ]
          }
        },
        "description": "Custom object schema."
      },
      "EmbeddingSchema": {
        "title": "EmbeddingSchema",
        "required": ["namespace", "apiVersion", "kind", "metadata", "spec"],
        "type": "object",
        "properties": {
          "namespace": {
            "maxLength": 63,
            "type": "string",
            "description": "The namespace of the object"
          },
          "apiVersion": {
            "enum": ["flock/v1"],
            "type": "string",
            "description": "API version"
          },
          "kind": {
            "enum": ["Embedding"],
            "type": "string",
            "description": "The kind of the object"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseMetaData"
              },
              {
                "description": "Base metadata schema."
              }
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Creation timestamp",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Last update timestamp",
            "format": "date-time"
          },
          "spec": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmbeddingSpec"
              },
              {
                "description": "Embedding spec."
              }
            ]
          }
        },
        "description": "Embedding schema."
      },
      "EmbeddingSpec": {
        "title": "EmbeddingSpec",
        "required": ["vendor"],
        "type": "object",
        "properties": {
          "options": {
            "type": "object",
            "description": "Embedding options"
          },
          "vendor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EmbeddingVendor"
              },
              {
                "description": "Embedding vendor"
              }
            ]
          }
        },
        "description": "Embedding spec."
      },
      "EmbeddingVendor": {
        "title": "EmbeddingVendor",
        "enum": ["OpenAIEmbeddings"],
        "type": "string",
        "description": "Enum for embedding vendors."
      },
      "InternalServerError1": {
        "title": "InternalServerError1",
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/Status1"
          },
          "code": {
            "$ref": "#/components/schemas/Code2"
          },
          "message": {
            "type": "string",
            "default": "Internal Server Error",
            "example": "Internal server error"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        }
      },
      "Kind": {
        "title": "Kind",
        "enum": [
          "Embedding",
          "VectorStore",
          "VectorStoreQATool",
          "LLM",
          "LoadTool",
          "Splitter",
          "Agent",
          "PromptTemplate",
          "LLMTool",
          "Custom"
        ],
        "type": "string",
        "description": "Enum for all kinds of resources."
      },
      "LLMSchema": {
        "title": "LLMSchema",
        "required": ["namespace", "apiVersion", "kind", "metadata", "spec"],
        "type": "object",
        "properties": {
          "namespace": {
            "maxLength": 63,
            "type": "string",
            "description": "The namespace of the object"
          },
          "apiVersion": {
            "enum": ["flock/v1"],
            "type": "string",
            "description": "API version"
          },
          "kind": {
            "enum": ["LLM"],
            "type": "string",
            "description": "The kind of the object"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseMetaData"
              },
              {
                "description": "Base metadata schema."
              }
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Creation timestamp",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Last update timestamp",
            "format": "date-time"
          },
          "spec": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LLMSpec"
              },
              {
                "description": "LLM spec."
              }
            ]
          }
        },
        "description": "LLM schema."
      },
      "LLMSpec": {
        "title": "LLMSpec",
        "required": ["vendor"],
        "type": "object",
        "properties": {
          "options": {
            "type": "object",
            "description": "Resource options"
          },
          "vendor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LLMVendor"
              },
              {
                "description": "LLM vendor"
              }
            ]
          }
        },
        "description": "LLM spec."
      },
      "LLMToolSchema": {
        "title": "LLMToolSchema",
        "required": ["namespace", "apiVersion", "kind", "metadata", "spec"],
        "type": "object",
        "properties": {
          "namespace": {
            "maxLength": 63,
            "type": "string",
            "description": "The namespace of the object"
          },
          "apiVersion": {
            "enum": ["flock/v1"],
            "type": "string",
            "description": "API version"
          },
          "kind": {
            "enum": ["LLMTool"],
            "type": "string",
            "description": "The kind of the object"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseMetaData"
              },
              {
                "description": "Base metadata schema."
              }
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Creation timestamp",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Last update timestamp",
            "format": "date-time"
          },
          "spec": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LLMToolSpec"
              },
              {
                "description": "LLM tool spec."
              }
            ]
          }
        },
        "description": "LLM tool schema."
      },
      "LLMToolSpec": {
        "title": "LLMToolSpec",
        "required": ["vendor", "dependencies"],
        "type": "object",
        "properties": {
          "options": {
            "type": "object",
            "description": "Options for the tool"
          },
          "vendor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LLMToolVendor"
              },
              {
                "description": "The class of the tool, e.g. LLMChain, etc."
              }
            ]
          },
          "dependencies": {
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
            "items": {},
            "description": "Tool dependencies"
          }
        },
        "description": "LLM tool spec."
      },
      "LLMToolVendor": {
        "title": "LLMToolVendor",
        "enum": ["LLMChain"],
        "type": "string",
        "description": "Enum for LLM tool vendors."
      },
      "LLMVendor": {
        "title": "LLMVendor",
        "enum": ["ChatOpenAI"],
        "type": "string",
        "description": "Enum for llm vendors."
      },
      "LoadToolSchema": {
        "title": "LoadToolSchema",
        "required": ["namespace", "apiVersion", "kind", "metadata", "spec"],
        "type": "object",
        "properties": {
          "namespace": {
            "maxLength": 63,
            "type": "string",
            "description": "The namespace of the object"
          },
          "apiVersion": {
            "enum": ["flock/v1"],
            "type": "string",
            "description": "API version"
          },
          "kind": {
            "enum": ["LoadTool"],
            "type": "string",
            "description": "The kind of the object"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseMetaData"
              },
              {
                "description": "Base metadata schema."
              }
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Creation timestamp",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Last update timestamp",
            "format": "date-time"
          },
          "spec": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LoadToolSpec"
              },
              {
                "description": "LoadTool spec."
              }
            ]
          }
        },
        "description": "LoadTool schema."
      },
      "LoadToolSpec": {
        "title": "LoadToolSpec",
        "required": ["vendor", "dependencies"],
        "type": "object",
        "properties": {
          "options": {
            "type": "object",
            "description": "Resource options"
          },
          "vendor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LoadToolVendor"
              },
              {
                "description": "The name of the search tool, e.g. serpapi, google-serper, etc."
              }
            ]
          },
          "dependencies": {
            "maxItems": 1,
            "minItems": 1,
            "type": "array",
            "items": {},
            "description": "Tool dependencies"
          }
        },
        "description": "LoadTool spec."
      },
      "LoadToolVendor": {
        "title": "LoadToolVendor",
        "enum": [
          "python_repl",
          "requests",
          "requests_get",
          "requests_post",
          "requests_patch",
          "requests_put",
          "requests_delete",
          "terminal",
          "wolfram-alpha",
          "google-search",
          "google-search-results-json",
          "searx-search-results-json",
          "bing-search",
          "google-serper",
          "serpapi",
          "searx-search",
          "wikipedia",
          "human",
          "news-api",
          "tmdb-api",
          "podcast-api",
          "pal-math",
          "pal-colored-objects",
          "llm-math",
          "open-meteo-api"
        ],
        "type": "string",
        "description": "Enum for search_tool vendors."
      },
      "PromptTemplateSchema": {
        "title": "PromptTemplateSchema",
        "required": ["namespace", "apiVersion", "kind", "metadata", "spec"],
        "type": "object",
        "properties": {
          "namespace": {
            "maxLength": 63,
            "type": "string",
            "description": "The namespace of the object"
          },
          "apiVersion": {
            "enum": ["flock/v1"],
            "type": "string",
            "description": "API version"
          },
          "kind": {
            "enum": ["PromptTemplate"],
            "type": "string",
            "description": "The kind of the object"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseMetaData"
              },
              {
                "description": "Base metadata schema."
              }
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Creation timestamp",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Last update timestamp",
            "format": "date-time"
          },
          "spec": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PromptTemplateSpec"
              },
              {
                "description": "PromptTemplate spec."
              }
            ]
          }
        },
        "description": "PromptTemplate schema."
      },
      "PromptTemplateSpec": {
        "title": "PromptTemplateSpec",
        "required": ["vendor"],
        "type": "object",
        "properties": {
          "options": {
            "type": "object",
            "description": "Resource options"
          },
          "vendor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PromptTemplateVendor"
              },
              {
                "description": "PromptTemplate vendor"
              }
            ]
          }
        },
        "description": "PromptTemplate spec."
      },
      "PromptTemplateVendor": {
        "title": "PromptTemplateVendor",
        "enum": ["PromptTemplate"],
        "type": "string",
        "description": "Enum for prompt template vendors."
      },
      "ResourceAccepted": {
        "title": "ResourceAccepted",
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "code": {
            "$ref": "#/components/schemas/Code4"
          },
          "data": {
            "$ref": "#/components/schemas/ResourceData"
          },
          "message": {
            "type": "string",
            "default": "Resource update request has been accepted and is being processed",
            "example": "Resource update request has been accepted and is being processed"
          }
        }
      },
      "ResourceAlreadyExists1": {
        "title": "ResourceAlreadyExists1",
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/Status1"
          },
          "code": {
            "$ref": "#/components/schemas/Code6"
          },
          "message": {
            "type": "string",
            "default": "A resource with the same unique property already exists",
            "example": "A resource with the same unique property already exists"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        }
      },
      "ResourceBadRequest1": {
        "title": "ResourceBadRequest1",
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/Status1"
          },
          "code": {
            "$ref": "#/components/schemas/Code5"
          },
          "message": {
            "type": "string",
            "default": "Invalid input provided",
            "example": "Invalid input provided"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        }
      },
      "ResourceCreated": {
        "title": "ResourceCreated",
        "type": "object",
        "properties": {
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Status"
              },
              {
                "example": "OK"
              }
            ]
          },
          "code": {
            "$ref": "#/components/schemas/Code3"
          },
          "data": {
            "$ref": "#/components/schemas/ResourceData"
          },
          "message": {
            "type": "string",
            "default": "Resource created successfully",
            "example": "Resource created successfully"
          }
        }
      },
      "ResourceDeleted": {
        "title": "ResourceDeleted",
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "message": {
            "type": "string",
            "default": "Resource deleted",
            "example": "Resource deleted"
          },
          "code": {
            "$ref": "#/components/schemas/Code7"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/VectorStoreQAToolSchema"
              },
              {
                "$ref": "#/components/schemas/PromptTemplateSchema"
              },
              {
                "$ref": "#/components/schemas/LLMSchema"
              },
              {
                "$ref": "#/components/schemas/CustomSchema"
              },
              {
                "$ref": "#/components/schemas/SplitterSchema"
              },
              {
                "$ref": "#/components/schemas/LLMToolSchema"
              },
              {
                "$ref": "#/components/schemas/EmbeddingSchema"
              },
              {
                "$ref": "#/components/schemas/VectorStoreSchema"
              },
              {
                "$ref": "#/components/schemas/LoadToolSchema"
              },
              {
                "$ref": "#/components/schemas/AgentSchema"
              }
            ]
          }
        }
      },
      "ResourceFetched": {
        "title": "ResourceFetched",
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "message": {
            "type": "string",
            "default": "Resources retrieved successfully",
            "example": "Resources retrieved successfully"
          },
          "code": {
            "$ref": "#/components/schemas/Code"
          },
          "data": {
            "$ref": "#/components/schemas/ResourceData"
          }
        }
      },
      "ResourceNotFound1": {
        "title": "ResourceNotFound1",
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/Status1"
          },
          "code": {
            "$ref": "#/components/schemas/Code1"
          },
          "message": {
            "type": "string",
            "default": "Resource not found",
            "example": "Resource not found"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        }
      },
      "ResourcesFetched": {
        "title": "ResourcesFetched",
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "$ref": "#/components/schemas/Code"
          },
          "data": {
            "$ref": "#/components/schemas/ResourceDetails"
          }
        }
      },
      "ResourceUpdated": {
        "title": "ResourceUpdated",
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "code": {
            "$ref": "#/components/schemas/Code7"
          },
          "data": {
            "$ref": "#/components/schemas/ResourceData"
          },
          "message": {
            "type": "string",
            "default": "Resource updated successfully",
            "example": "Resource updated successfully"
          }
        }
      },
      "SplitterSchema": {
        "title": "SplitterSchema",
        "required": ["namespace", "apiVersion", "kind", "metadata", "spec"],
        "type": "object",
        "properties": {
          "namespace": {
            "maxLength": 63,
            "type": "string",
            "description": "The namespace of the object"
          },
          "apiVersion": {
            "enum": ["flock/v1"],
            "type": "string",
            "description": "API version"
          },
          "kind": {
            "enum": ["Splitter"],
            "type": "string",
            "description": "The kind of the object"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseMetaData"
              },
              {
                "description": "Base metadata schema."
              }
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Creation timestamp",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Last update timestamp",
            "format": "date-time"
          },
          "spec": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SplitterSpec"
              },
              {
                "description": "Splitter spec."
              }
            ]
          }
        },
        "description": "Splitter schema."
      },
      "SplitterSpec": {
        "title": "SplitterSpec",
        "required": ["vendor"],
        "type": "object",
        "properties": {
          "options": {
            "type": "object",
            "description": "Resource options"
          },
          "vendor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SplitterVendor"
              },
              {
                "description": "The class of the splitter, e.g. CharacterTextSplitter, etc."
              }
            ]
          }
        },
        "description": "Splitter spec."
      },
      "SplitterVendor": {
        "title": "SplitterVendor",
        "enum": ["CharacterTextSplitter", "PythonCodeTextSplitter"],
        "type": "string",
        "description": "Enum for splitter vendors."
      },
      "Status": {
        "title": "Status",
        "enum": ["OK"],
        "type": "string"
      },
      "Status1": {
        "title": "Status1",
        "enum": ["error"],
        "type": "string"
      },
      "VectorStoreQAToolSchema": {
        "title": "VectorStoreQAToolSchema",
        "required": ["namespace", "apiVersion", "kind", "metadata", "spec"],
        "type": "object",
        "properties": {
          "namespace": {
            "maxLength": 63,
            "type": "string",
            "description": "The namespace of the object"
          },
          "apiVersion": {
            "enum": ["flock/v1"],
            "type": "string",
            "description": "API version"
          },
          "kind": {
            "enum": ["VectorStoreQATool"],
            "type": "string",
            "description": "The kind of the object"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseMetaData"
              },
              {
                "description": "Base metadata schema."
              }
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Creation timestamp",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Last update timestamp",
            "format": "date-time"
          },
          "spec": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VectorStoreQAToolSpec"
              },
              {
                "description": "VectorStoreQATool spec."
              }
            ]
          }
        },
        "description": "VectorStoreQATool schema."
      },
      "VectorStoreQAToolSpec": {
        "title": "VectorStoreQAToolSpec",
        "required": ["vendor", "dependencies"],
        "type": "object",
        "properties": {
          "options": {
            "type": "object",
            "description": "Options for the tool"
          },
          "vendor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VectorStoreQAToolVendor"
              },
              {
                "description": "The class of the tool, e.g. RetrievalQAWithSourcesChain, etc."
              }
            ]
          },
          "dependencies": {
            "maxItems": 2,
            "minItems": 2,
            "type": "array",
            "items": {},
            "description": "Tool dependencies"
          }
        },
        "description": "VectorStoreQATool spec."
      },
      "VectorStoreQAToolVendor": {
        "title": "VectorStoreQAToolVendor",
        "enum": ["RetrievalQAWithSourcesChain"],
        "type": "string",
        "description": "Enum for vectorstore_qa_tool vendors."
      },
      "VectorStoreSchema": {
        "title": "VectorStoreSchema",
        "required": ["namespace", "apiVersion", "kind", "metadata", "spec"],
        "type": "object",
        "properties": {
          "namespace": {
            "maxLength": 63,
            "type": "string",
            "description": "The namespace of the object"
          },
          "apiVersion": {
            "enum": ["flock/v1"],
            "type": "string",
            "description": "API version"
          },
          "kind": {
            "enum": ["VectorStore"],
            "type": "string",
            "description": "The kind of the object"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BaseMetaData"
              },
              {
                "description": "Base metadata schema."
              }
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Creation timestamp",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Last update timestamp",
            "format": "date-time"
          },
          "spec": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VectorStoreSpec"
              },
              {
                "description": "Vectorstore spec."
              }
            ]
          }
        },
        "description": "Vectorstore schema."
      },
      "VectorStoreSpec": {
        "title": "VectorStoreSpec",
        "required": ["vendor", "dependencies"],
        "type": "object",
        "properties": {
          "options": {
            "type": "object",
            "description": "Resource options"
          },
          "vendor": {
            "type": "string",
            "description": "The vendor of the vector store, e.g. Chroma, Pinecone, etc."
          },
          "dependencies": {
            "maxItems": 1,
            "minItems": 1,
            "type": "array",
            "items": {},
            "description": "Vectorstore dependencies"
          }
        },
        "description": "Vectorstore spec."
      },
      "ResourceData": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/VectorStoreQAToolSchema"
          },
          {
            "$ref": "#/components/schemas/PromptTemplateSchema"
          },
          {
            "$ref": "#/components/schemas/LLMSchema"
          },
          {
            "$ref": "#/components/schemas/CustomSchema"
          },
          {
            "$ref": "#/components/schemas/SplitterSchema"
          },
          {
            "$ref": "#/components/schemas/LLMToolSchema"
          },
          {
            "$ref": "#/components/schemas/EmbeddingSchema"
          },
          {
            "$ref": "#/components/schemas/VectorStoreSchema"
          },
          {
            "$ref": "#/components/schemas/LoadToolSchema"
          },
          {
            "$ref": "#/components/schemas/AgentSchema"
          }
        ]
      }
    }
  },
  "tags": [
    {
      "name": "flock",
      "description": "flock tag"
    }
  ]
}
